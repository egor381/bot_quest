import os
import telebot
from telebot import types
from dotenv import load_dotenv
from quests import *

load_dotenv()
token = os.getenv('TOKEN')
if not token:
    raise Exception('–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN')

bot = telebot.TeleBot(token)
quests = Quests()


def response_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
    markup.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç'))
    markup.add(types.KeyboardButton('–í –¥—Ä—É–≥–æ–π —Ä–∞–∑'))

    bot.send_message(message.chat.id,
                     text=f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –∏–≥—Ä–µ?',
                     reply_markup=markup
                     )


def response_help(message):
    bot.send_message(message.chat.id,
                     parse_mode='MarkdownV2',
                     text='–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n' +
                          commands_to_string()
                     )


def response_start_quest(message):
    bot.send_message(message.chat.id, text=quests.get_start_message())
    start_quest(message.chat.id)


def response_skip_quest(message):
    bot.send_message(message.chat.id, text='–£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ')


def unknown_state(chat_id):
    bot.send_message(chat_id, text='–°–æ–∂–∞–ª–µ—é, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µüò¢')


commands = [
    {
        'command': '/start',
        'description': '–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞',
        'keywords': ['start', '—Å—Ç–∞—Ä—Ç', '–ø–æ–µ—Ö–∞–ª–∏'],
        'handler': response_start
    },
    {
        'command': '/help',
        'description': '–ø–µ—Ä–µ—á–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–Ω–æ–π –∫–æ–º–∞–Ω–¥',
        'keywords': ['help', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞'],
        'handler': response_help
    },
    {
        'command': None,
        'description': '–Ω–∞—á–∞–ª–æ –∫–≤–µ—Å—Ç–∞',
        'keywords': ['–Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç'],
        'handler': response_start_quest
    },
    {
        'command': None,
        'description': '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–≤–µ—Å—Ç–∞',
        'keywords': ['–≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑'],
        'handler': response_skip_quest
    },
]


def commands_to_string():
    result = ''
    for command in commands:
        if command['command'] and command['description']:
            result += f"*{command['command']}* \\- {command['description']}\n"
    return result


def get_image(file_name):
    return open(file_name, 'rb')


def process_command(message, text):
    is_processed = False
    for command in commands:
        handler = None
        if command['command'] == text.lower():
            handler = command['handler']
        else:
            keywords = command['keywords']
            for keyword in keywords:
                if keyword in text.lower():
                    handler = command['handler']
        if handler:
            handler(message)
            is_processed = True
    return is_processed


def process_answer(message, text):
    is_processed = False
    answer = quests.process_answer(message.chat.id, text)
    if answer:
        next_question(message.chat.id, answer)
        is_processed = True
    return is_processed


def create_question(chat_id):
    quest = quests.get_quest(chat_id)
    if quest:
        current_route = quest.get_current_route()
        if current_route:
            markup = types.ReplyKeyboardRemove()
            if 'answers' in current_route:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                for answer in current_route['answers']:
                    markup.add(
                        types.KeyboardButton(answer['text'])
                    )

            bot.send_message(chat_id,
                             text=current_route['question'],
                             reply_markup=markup
                             )
            if current_route['inventory']:
                bot.send_message(chat_id, text=current_route['inventory'])
            bot.send_photo(chat_id, photo=get_image(current_route['image']))
    else:
        unknown_state(chat_id)


def create_result(chat_id):
    quest = quests.get_quest(chat_id)
    if quest:
        bot.send_message(chat_id,
                         text=quest.get_result_string(),
                         reply_markup=types.ReplyKeyboardRemove()
                         )
        # bot.send_photo(chat_id, photo=quest.get_result_image())
    else:
        unknown_state(chat_id)


def start_quest(chat_id):
    if quests.start_quest(chat_id):
        next_question(chat_id)
    else:
        unknown_state(chat_id)


def next_question(chat_id, answer=None):
    if quests.next_question(chat_id, answer):
        create_question(chat_id)
    else:
        create_result(chat_id)
        quests.finish_quest(chat_id)


def process_message(message, text):
    if not process_command(message, text) and not process_answer(message, text):
        bot.send_message(message.chat.id,
                         parse_mode='MarkdownV2',
                         text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å\n' +
                              '–Ø –ø–æ–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                              commands_to_string()
                         )


@bot.message_handler(content_types=['text'])
def text_message(message):
    process_message(message, message.text)


@bot.message_handler(content_types=['sticker'])
def media_message(message):
    bot.send_message(message.chat.id, text='–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Äüëç')


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    process_message(call.message, call.data)
    bot.answer_callback_query(call.id)





menu_commands = []
for command in commands:
    if command['command'] and command['description']:
        menu_commands.append(telebot.types.BotCommand(command['command'], command['description']))

try:
    bot.set_my_commands(menu_commands)
    bot.set_my_short_description("–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞-–±—Ä–æ–¥–∏–ª–∫–∞")
    bot.set_my_description(quests.get_quest_description())
    bot.polling(non_stop=True)
except Exception as e:
    raise Exception(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Telegram, {e}')
